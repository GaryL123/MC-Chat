"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prettierFormatter = exports.default = void 0;
var _nodePath = _interopRequireDefault(require("node:path"));
var _debug = _interopRequireDefault(require("debug"));
var _prettier = require("prettier");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const debug = (0, _debug.default)('babel-plugin-tester:formatter');
const configDirectoryCache = Object.create(null);
const getCachedConfig = filepath => {
  if (!(filepath in configDirectoryCache)) {
    configDirectoryCache[filepath] = _prettier.resolveConfig.sync(filepath);
    debug(`caching prettier configuration resolved from ${filepath}: %O`, configDirectoryCache[filepath]);
  } else {
    debug(`using cached prettier configuration resolved from ${filepath}`);
  }
  return configDirectoryCache[filepath];
};
const prettierFormatter = (code, {
  cwd = process.cwd(),
  filename,
  filepath = filename || _nodePath.default.join(cwd, 'dummy.js'),
  config,
  prettierOptions = config || getCachedConfig(filepath)
} = {}) => {
  const finalPrettierOptions = {
    filepath,
    ...prettierOptions
  };
  debug('cwd: %O', cwd);
  debug('filepath: %O', filepath);
  debug('prettier options: %O', finalPrettierOptions);
  debug('original code: %O', code);
  const formattedCode = (0, _prettier.format)(code, finalPrettierOptions);
  debug('formatted code: %O', code);
  return formattedCode;
};
exports.prettierFormatter = prettierFormatter;
var _default = prettierFormatter;
exports.default = _default;