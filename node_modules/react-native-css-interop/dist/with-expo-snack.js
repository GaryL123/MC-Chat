"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withExpoSnack = void 0;
const react_1 = __importDefault(require("react"));
const runtime_1 = require("./runtime");
const react_native_1 = require("react-native");
const originalCreateElement = react_1.default.createElement;
react_1.default.createElement = function (type, props, ...children) {
    if (!props || type === react_1.default.Fragment || props.__preventSnackRenderLoop) {
        if (props) {
            delete props.__preventSnackRenderLoop;
        }
        return originalCreateElement(type, props, ...children);
    }
    props.__preventSnackRenderLoop = true;
    if (children.length) {
        props.children = children.length <= 1 ? children[0] : children;
    }
    return (0, runtime_1.render)((type, props) => {
        return Array.isArray(props.children)
            ? originalCreateElement(type, props, ...props.children)
            : originalCreateElement(type, props, props.children);
    }, type, props);
};
const isOk = (response) => {
    return response.ok ? response.json() : Promise.reject(response);
};
const alreadyProcessed = new Set();
let fetchUrl = "https://nativewind.dev/api/compile";
function fetchStyle(className) {
    className = className
        .split(" ")
        .filter((c) => !alreadyProcessed.has(c))
        .join(" ");
    if (!className)
        return;
    fetch(fetchUrl, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: `{"content":"${className}"}`,
    })
        .then(isOk)
        .then((body) => {
        className.split(" ").forEach((c) => alreadyProcessed.add(c));
        runtime_1.StyleSheet.registerCompiled(body);
    })
        .catch(() => {
        console.error("Error connecting to NativeWind snack server");
    });
}
runtime_1.StyleSheet.unstable_hook_onClassName?.(fetchStyle);
var tailwindScript;
if (react_native_1.Platform.OS === "web") {
    tailwindScript = document.createElement("script");
    tailwindScript.setAttribute("src", "https://cdn.tailwindcss.com");
    document.body.appendChild(tailwindScript);
}
function withExpoSnack(Component, apiUrl = "https://nativewind.dev/api/compile") {
    fetchUrl = apiUrl;
    return function WithExpoSnackLoader() {
        const [loaded, setLoaded] = react_1.default.useState(react_native_1.Platform.OS === "web" ? false : true);
        react_1.default.useEffect(() => {
            return tailwindScript?.addEventListener("load", () => setLoaded(true));
        }, []);
        return loaded
            ? originalCreateElement(Component)
            : originalCreateElement(react_1.default.Fragment);
    };
}
exports.withExpoSnack = withExpoSnack;
//# sourceMappingURL=with-expo-snack.js.map