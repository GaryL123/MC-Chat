"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElementAndCheckCssInterop = exports.remapProps = exports.cssInterop = exports.render = exports.interopComponents = void 0;
const react_1 = require("react");
exports.interopComponents = new Map();
function render(jsx, type, props, ...args) {
    const config = exports.interopComponents.get(type);
    if (config) {
        props = { ...props };
        for (const entry of config.config) {
            const key = entry[0];
            const sourceProp = entry[1];
            const newStyles = [];
            const value = props[sourceProp];
            if (typeof value === "string") {
                newStyles.push({
                    $$css: true,
                    [value]: value,
                });
            }
            delete props[sourceProp];
            let styles = props[key];
            if (Array.isArray(styles)) {
                styles = [...newStyles, ...styles];
            }
            else if (styles) {
                styles = [...newStyles, styles];
            }
            else {
                styles = newStyles;
            }
            props[key] = styles;
        }
    }
    return jsx(type, props, ...args);
}
exports.render = render;
const cssInterop = (component, mapping) => {
    exports.interopComponents.set(component, getNormalizeConfig(mapping));
    return component;
};
exports.cssInterop = cssInterop;
exports.remapProps = exports.cssInterop;
function createElementAndCheckCssInterop(type, props, ...children) {
    return render(react_1.createElement, type, props, ...children);
}
exports.createElementAndCheckCssInterop = createElementAndCheckCssInterop;
function getNormalizeConfig(mapping) {
    const config = new Map();
    const dependencies = new Set();
    const sources = new Set();
    for (const [key, options] of Object.entries(mapping)) {
        let target;
        let nativeStyleToProp;
        if (!options)
            continue;
        if (typeof options === "boolean") {
            target = key;
        }
        else if (typeof options === "string") {
            target = options;
        }
        else if (typeof options.target === "boolean") {
            target = key;
            nativeStyleToProp = options.nativeStyleToProp;
        }
        else if (typeof options.target === "string") {
            target = options.target;
            nativeStyleToProp = options.nativeStyleToProp;
        }
        else {
            throw new Error(`Unknown cssInterop target from config: ${JSON.stringify(config)}`);
        }
        config.set(target, [key, nativeStyleToProp]);
        dependencies.add(target);
        dependencies.add(key);
        sources.add(key);
    }
    return {
        dependencies: Array.from(dependencies),
        sources: Array.from(sources),
        config: Array.from(config.entries()).map(([key, [source, nativeStyleToProp]]) => [key, source, nativeStyleToProp]),
    };
}
//# sourceMappingURL=rendering.js.map