import { ComponentClass, ComponentType, FunctionComponent, ReactNode, createElement } from "react";
import type { CssInterop } from "../../types";
export type InteropComponent = {
    type: ComponentType<any>;
    check: (props: Record<string, any>) => boolean;
    createElement: (props: Record<string, any>, ...children: ReactNode[]) => ReturnType<typeof createElement>;
};
export declare const interopComponents: Map<string | object, InteropComponent>;
export declare function render(jsx: any, type: any, props: any, ...args: any): any;
export declare const cssInterop: CssInterop;
export declare const remapProps: CssInterop;
export declare function createElementAndCheckCssInterop(type: string | FunctionComponent | ComponentClass, props: Record<string, any>, ...children: ReactNode[]): import("react").ReactElement<{}, string | import("react").JSXElementConstructor<any>>;
