import { Appearance, Dimensions } from "react-native";
import { Signal } from "../signals";
import { INTERNAL_RESET, INTERNAL_SET } from "../../shared";
import { RuntimeValueDescriptor, GroupedRuntimeStyle, ExtractedAnimation, ExtractionWarning, InteropStore } from "../../types";
export declare const styleSignals: Map<string, Signal<GroupedRuntimeStyle>>;
export declare const opaqueStyles: WeakMap<object, GroupedRuntimeStyle>;
export declare const animationMap: Map<string, ExtractedAnimation>;
export declare const globalClassNameCache: Map<string, InteropStore>;
export declare const globalInlineCache: WeakMap<object, InteropStore>;
export declare const warnings: Map<string, ExtractionWarning[]>;
export declare const warned: Set<string>;
export declare const externalClassNameCompilerCallback: {
    current?: (className: string) => void;
};
export declare const globalVariables: {
    root: Map<string, {
        id: string;
        get: () => any;
        set: (value: Record<string, any> | any) => void;
        peek: () => any;
        unsubscribe: (subscription: () => void) => void;
    }>;
    universal: Map<string, {
        id: string;
        get: () => any;
        set: (value: Record<string, any> | any) => void;
        peek: () => any;
        unsubscribe: (subscription: () => void) => void;
    }>;
};
export declare const interopContext: import("react").Context<InteropStore>;
export declare const InteropProvider: import("react").Provider<InteropStore>;
export declare const rem: {
    id: string;
    get: () => any;
    set: (value: Record<string, any> | any) => void;
    peek: () => any;
    unsubscribe: (subscription: () => void) => void;
};
export declare const vw: {
    get: () => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET]: (nextValue: number | ((previous?: number | undefined) => number) | undefined) => void;
};
export declare const vh: {
    get: () => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET]: (nextValue: number | ((previous?: number | undefined) => number) | undefined) => void;
};
export declare const isReduceMotionEnabled: {
    [INTERNAL_RESET]: () => void;
    subscriptions: Set<import("../signals").Computed<any> | (() => void)>;
    get(): boolean;
    id: string | undefined;
    peek(): boolean;
    set(nextValue: boolean | ((previous?: boolean | undefined) => boolean) | undefined): void;
    subscribe(callback: () => void): () => void;
    unsubscribe(callback: () => void): void;
};
export type ColorSchemeSignal = ReturnType<typeof createColorSchemeSignal>;
export declare function createColorSchemeSignal(id: string): {
    id: string;
    get: () => any;
    set: (value: Record<string, any> | any) => void;
    peek: () => any;
    unsubscribe: (subscription: () => void) => void;
};
export declare const colorScheme: {
    set(value: "light" | "dark" | "system"): void;
    get(): "light" | "dark";
    toggle(): void;
    [INTERNAL_RESET]: ($appearance: typeof Appearance) => void;
    subscriptions: Set<import("../signals").Computed<any> | (() => void)>;
    id: string | undefined;
    peek(): "light" | "dark" | "system";
    subscribe(callback: () => void): () => void;
    unsubscribe(callback: () => void): void;
};
export declare function useColorScheme(): {
    colorScheme: "light" | "dark";
    setColorScheme: (value: "light" | "dark" | "system") => void;
    toggleColorScheme: () => void;
};
export declare function vars(variables: Record<string, RuntimeValueDescriptor>): import("../../types").Style;
export declare const useUnstableNativeVariable: (name: string) => any;
