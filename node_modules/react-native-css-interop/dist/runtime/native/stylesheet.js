"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyleSheet = void 0;
const react_native_1 = require("react-native");
const shared_1 = require("../../shared");
const style_1 = require("./style");
const globals_1 = require("./globals");
const commonStyleSheet = {
    [shared_1.INTERNAL_FLAGS]: {},
    [shared_1.INTERNAL_RESET]({ dimensions = react_native_1.Dimensions, appearance = react_native_1.Appearance } = {}) {
        globals_1.animationMap.clear();
        globals_1.warnings.clear();
        globals_1.warned.clear();
        globals_1.rem.set(14);
        globals_1.styleSignals.clear();
        globals_1.vw[shared_1.INTERNAL_RESET](dimensions);
        globals_1.vh[shared_1.INTERNAL_RESET](dimensions);
        globals_1.colorScheme[shared_1.INTERNAL_RESET](appearance);
    },
    getFlag(name) {
        return this[shared_1.INTERNAL_FLAGS][name];
    },
    unstable_hook_onClassName(callback) {
        globals_1.externalClassNameCompilerCallback.current = callback;
    },
    register() {
        throw new Error("Stylesheet.register is not yet implemented");
    },
    registerCompiled(options) {
        this[shared_1.INTERNAL_FLAGS]["$$receivedData"] = "true";
        if (options.flags) {
            Object.assign(this[shared_1.INTERNAL_FLAGS], options.flags);
        }
        if (options.keyframes) {
            for (const [name, keyframes] of Object.entries(options.keyframes)) {
                globals_1.animationMap.set(name, keyframes);
            }
        }
        if (options.declarations) {
            for (let [name, styles] of options.declarations) {
                (0, style_1.upsertStyleSignal)(name, styles);
            }
        }
        if (options.rootVariables) {
            for (const [name, value] of Object.entries(options.rootVariables)) {
                let signal = globals_1.globalVariables.root.get(name);
                if (!signal) {
                    signal = (0, globals_1.createColorSchemeSignal)(`root:${name}`);
                    globals_1.globalVariables.root.set(name, signal);
                }
                signal.set(value);
            }
        }
        if (options.universalVariables) {
            for (const [name, value] of Object.entries(options.universalVariables)) {
                let signal = globals_1.globalVariables.universal.get(name);
                if (!signal) {
                    signal = (0, globals_1.createColorSchemeSignal)(`root:${name}`);
                    globals_1.globalVariables.universal.set(name, signal);
                }
                signal.set(value);
            }
        }
        if (options.rem) {
            globals_1.rem.set(options.rem);
        }
    },
};
exports.StyleSheet = Object.assign({}, commonStyleSheet, react_native_1.StyleSheet);
//# sourceMappingURL=stylesheet.js.map