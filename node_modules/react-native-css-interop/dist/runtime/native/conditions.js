"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testAttribute = exports.getTestAttributeValue = exports.testCondition = exports.testContainerQuery = exports.testPseudoClasses = exports.testMediaQuery = exports.testMediaQueries = void 0;
const globals_1 = require("./globals");
const react_native_1 = require("react-native");
const shared_1 = require("../../shared");
function testMediaQueries(mediaQueries) {
    return mediaQueries.every((query) => testMediaQuery(query));
}
exports.testMediaQueries = testMediaQueries;
function testMediaQuery(mediaQuery, conditionReference = {
    width: globals_1.vw,
    height: globals_1.vh,
}) {
    const pass = testCondition(mediaQuery.condition, conditionReference);
    return mediaQuery.qualifier === "not" ? !pass : pass;
}
exports.testMediaQuery = testMediaQuery;
function testPseudoClasses(state, meta) {
    let fail = false;
    if (meta.active)
        fail ||= state.getInteraction("active") !== true;
    if (meta.hover)
        fail ||= state.getInteraction("hover") !== true;
    if (meta.focus)
        fail ||= state.getInteraction("focus") !== true;
    return !fail;
}
exports.testPseudoClasses = testPseudoClasses;
function testContainerQuery(state, containerQuery) {
    if (!containerQuery || containerQuery.length === 0) {
        return true;
    }
    return containerQuery.every((query) => {
        let container = query.name ? state.getContainer(query.name) : null;
        if (query.name && !container)
            return false;
        if (!container)
            container = state.getContainer(shared_1.DEFAULT_CONTAINER_NAME);
        if (!container)
            return false;
        if (query.pseudoClasses &&
            !testPseudoClasses(container, query.pseudoClasses)) {
            return false;
        }
        if (!query.condition)
            return true;
        const layout = container.layout.get() || [0, 0];
        return testCondition(query.condition, {
            width: layout[0],
            height: layout[1],
        });
    });
}
exports.testContainerQuery = testContainerQuery;
function testCondition(condition, conditionReference) {
    if (!condition)
        return true;
    if (condition.type === "operation") {
        if (condition.operator === "and") {
            return condition.conditions.every((c) => testCondition(c, conditionReference));
        }
        else {
            return condition.conditions.some((c) => testCondition(c, conditionReference));
        }
    }
    else if (condition.type === "not") {
        return !testCondition(condition.value, conditionReference);
    }
    else if (condition.type === "style") {
        return false;
    }
    return Boolean(testFeature(condition.value, conditionReference));
}
exports.testCondition = testCondition;
function testFeature(feature, conditionReference) {
    switch (feature.type) {
        case "plain":
            return testPlainFeature(feature, conditionReference);
        case "range":
            return testRange(feature, conditionReference);
        case "boolean":
            return testBoolean(feature);
        case "interval":
            return false;
        default:
            feature;
    }
    return false;
}
function testPlainFeature(feature, ref) {
    const value = getMediaFeatureValue(feature.value);
    if (value === null) {
        return false;
    }
    switch (feature.name) {
        case "display-mode":
            return value === "native" || react_native_1.Platform.OS === value;
        case "prefers-color-scheme":
            return globals_1.colorScheme.get() === value;
        case "width":
            return testComparison("equal", ref.width, value);
        case "min-width":
            return testComparison("greater-than-equal", ref.width, value);
        case "max-width":
            return testComparison("less-than-equal", ref.width, value);
        case "height":
            return testComparison("equal", ref.height, value);
        case "min-height":
            return testComparison("greater-than-equal", ref.height, value);
        case "max-height":
            return testComparison("less-than-equal", ref.height, value);
        case "orientation":
            return value === "landscape"
                ? testComparison("less-than", ref.height, ref.width)
                : testComparison("greater-than-equal", ref.height, ref.width);
        default:
            return false;
    }
}
function getMediaFeatureValue(value) {
    if (value.type === "number") {
        return value.value;
    }
    else if (value.type === "length") {
        if (value.value.type === "value") {
            const length = value.value.value;
            switch (length.unit) {
                case "px":
                    return length.value;
                case "rem":
                    return length.value * globals_1.rem.get();
                default:
                    return null;
            }
        }
        else {
            return null;
        }
    }
    else if (value.type === "ident") {
        return value.value;
    }
    return null;
}
function testRange(feature, ref) {
    const value = getMediaFeatureValue(feature.value);
    if (value === null || typeof value !== "number") {
        return false;
    }
    switch (feature.name) {
        case "height":
            return testComparison(feature.operator, ref.height, value);
        case "width":
            return testComparison(feature.operator, ref.width, value);
        default:
            return false;
    }
}
function testComparison(comparison, ref, value) {
    ref = unwrap(ref);
    value = unwrap(value);
    if (typeof value !== "number")
        return false;
    switch (comparison) {
        case "equal":
            return ref === value;
        case "greater-than":
            return ref > value;
        case "greater-than-equal":
            return ref >= value;
        case "less-than":
            return ref < value;
        case "less-than-equal":
            return ref < value;
    }
}
function testBoolean(feature) {
    switch (feature.name) {
        case "prefers-reduced-motion":
            return globals_1.isReduceMotionEnabled.get();
    }
    return false;
}
function unwrap(value) {
    return value && typeof value === "object" && "get" in value
        ? value.get()
        : value;
}
function getTestAttributeValue(props, condition) {
    return condition.type === "data-attribute"
        ? props["dataSet"]?.[condition.name.replace("data-", "")]
        : props[condition.name];
}
exports.getTestAttributeValue = getTestAttributeValue;
function testAttribute(propValue, condition) {
    const operation = condition.operation;
    if (operation == null)
        return propValue != null;
    switch (operation.operator) {
        case "empty": {
            return propValue == null || propValue == "";
        }
        case "includes":
        case "dash-match":
        case "prefix":
        case "substring":
        case "suffix":
            return false;
        case "equal": {
            return propValue?.toString() === operation.value.toString();
        }
    }
}
exports.testAttribute = testAttribute;
//# sourceMappingURL=conditions.js.map