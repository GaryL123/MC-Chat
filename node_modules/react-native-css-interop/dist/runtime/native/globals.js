"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUnstableNativeVariable = exports.vars = exports.useColorScheme = exports.colorScheme = exports.createColorSchemeSignal = exports.isReduceMotionEnabled = exports.vh = exports.vw = exports.rem = exports.InteropProvider = exports.interopContext = exports.globalVariables = exports.externalClassNameCompilerCallback = exports.warned = exports.warnings = exports.globalInlineCache = exports.globalClassNameCache = exports.animationMap = exports.opaqueStyles = exports.styleSignals = void 0;
const react_1 = require("react");
const react_native_1 = require("react-native");
const signals_1 = require("../signals");
const shared_1 = require("../../shared");
exports.styleSignals = new Map();
exports.opaqueStyles = new WeakMap();
exports.animationMap = new Map();
exports.globalClassNameCache = new Map();
exports.globalInlineCache = new WeakMap();
exports.warnings = new Map();
exports.warned = new Set();
exports.externalClassNameCompilerCallback = {
    current: undefined,
};
exports.globalVariables = {
    root: new Map(),
    universal: new Map(),
};
const rootContext = {
    inlineVariables: exports.globalVariables.root,
    getContainer() { },
    getVariable(name) {
        return exports.globalVariables.root.get(name)?.get();
    },
};
exports.interopContext = (0, react_1.createContext)(rootContext);
exports.InteropProvider = exports.interopContext.Provider;
exports.rem = createColorSchemeSignal("rem");
exports.vw = viewportUnit("width", react_native_1.Dimensions);
exports.vh = viewportUnit("height", react_native_1.Dimensions);
function viewportUnit(key, dimensions) {
    const signal = (0, signals_1.createSignal)(dimensions.get("window")[key] || 0);
    let subscription = dimensions.addEventListener("change", ({ window }) => {
        signal.set(window[key]);
    });
    const get = () => signal.get() || 0;
    const reset = (dimensions) => {
        signal.set(dimensions.get("window")[key] || 0);
        subscription.remove();
        subscription = dimensions.addEventListener("change", ({ window }) => {
            signal.set(window[key]);
        });
    };
    return { get, [shared_1.INTERNAL_RESET]: reset, [shared_1.INTERNAL_SET]: signal.set };
}
exports.isReduceMotionEnabled = (function createIsReduceMotionEnabled() {
    const signal = (0, signals_1.createSignal)(false);
    react_native_1.AccessibilityInfo.isReduceMotionEnabled()?.then(signal.set);
    react_native_1.AccessibilityInfo.addEventListener("reduceMotionChanged", signal.set);
    return { ...signal, [shared_1.INTERNAL_RESET]: () => signal.set(false) };
})();
function createColorSchemeSignal(id) {
    let light = (0, signals_1.createSignal)(undefined, `${id}#light`);
    let dark = (0, signals_1.createSignal)(undefined, `${id}#dark`);
    const get = () => {
        return exports.colorScheme.get() === "light"
            ? light.get()
            : dark.get() ?? light.get();
    };
    const peek = () => {
        return exports.colorScheme.peek() === "light"
            ? light.peek()
            : dark.peek() ?? light.peek();
    };
    const unsubscribe = (subscription) => {
        dark.unsubscribe(subscription);
        light.unsubscribe(subscription);
    };
    const set = (value) => {
        if (typeof value === "object") {
            if ("dark" in value)
                dark.set(value.dark);
            if ("light" in value)
                light.set(value.light);
        }
        else {
            light.set(value);
            dark.set(value);
        }
    };
    return {
        id,
        get,
        set,
        peek,
        unsubscribe,
    };
}
exports.createColorSchemeSignal = createColorSchemeSignal;
let appearance = react_native_1.Appearance;
let appearanceListener = appearance.addChangeListener((state) => _colorScheme.set(state.colorScheme ?? "light"));
react_native_1.AppState.addEventListener("change", () => _colorScheme.set(appearance.getColorScheme() ?? "light"));
const _colorScheme = (0, signals_1.createSignal)("system");
exports.colorScheme = {
    ..._colorScheme,
    set(value) {
        _colorScheme.set(value);
        if (value === "system") {
            appearance.setColorScheme(null);
        }
        else {
            appearance.setColorScheme(value);
        }
    },
    get() {
        let current = _colorScheme.get();
        if (current === "system")
            current = appearance.getColorScheme() ?? "light";
        return current;
    },
    toggle() {
        let current = _colorScheme.peek();
        if (current === "system")
            current = appearance.getColorScheme() ?? "light";
        _colorScheme.set(current === "light" ? "dark" : "light");
    },
    [shared_1.INTERNAL_RESET]: ($appearance) => {
        _colorScheme.set("system");
        appearance = $appearance;
        appearanceListener.remove();
        appearanceListener = appearance.addChangeListener((state) => _colorScheme.set(state.colorScheme ?? "light"));
    },
};
function useColorScheme() {
    return (0, signals_1.useComputed)(() => ({
        colorScheme: exports.colorScheme.get(),
        setColorScheme: exports.colorScheme.set,
        toggleColorScheme: exports.colorScheme.toggle,
    }));
}
exports.useColorScheme = useColorScheme;
function vars(variables) {
    const style = {};
    exports.opaqueStyles.set(style, {
        scope: shared_1.STYLE_SCOPES.SELF,
        1: [
            {
                $$type: "runtime",
                scope: shared_1.STYLE_SCOPES.SELF,
                variables: Object.entries(variables).map(([name, value]) => {
                    return [name.startsWith("--") ? name : `--${name}`, value];
                }),
                specificity: {
                    A: 0,
                    B: 0,
                    C: 0,
                    I: 0,
                    O: 0,
                    S: 0,
                    inline: 1,
                },
            },
        ],
    });
    return style;
}
exports.vars = vars;
const useUnstableNativeVariable = (name) => {
    const state = (0, react_1.useContext)(exports.interopContext);
    return (0, signals_1.useComputed)(() => state.getVariable(name), state);
};
exports.useUnstableNativeVariable = useUnstableNativeVariable;
//# sourceMappingURL=globals.js.map