/// <reference types="jest" />
import { ComponentType } from "react";
import { CssToReactNativeRuntimeOptions, EnableCssInteropOptions, Style } from "../types";
import "../runtime/components";
import { remapProps } from "../runtime/components/rendering";
export * from "../types";
export { warnings } from "../runtime/native/globals";
declare global {
    namespace jest {
        interface Matchers<R> {
            toHaveStyle(style?: Style | Style[]): R;
            toHaveAnimatedStyle(style?: Style): R;
        }
    }
}
export declare function createMockComponent<const T extends ComponentType, const M extends EnableCssInteropOptions<any>>(Component: T, mapping?: EnableCssInteropOptions<T> & M): import("react").ForwardRefExoticComponent<Omit<any, "ref"> & import("react").RefAttributes<unknown>> & {
    mock: jest.Mock<any, [any, any], any>;
};
export declare function createRemappedComponent<P extends object = any, M = {
    className: "style";
}>(Component: React.ComponentType<P>, mapping: Parameters<typeof remapProps<any, any>>[1]): import("react").ForwardRefExoticComponent<Omit<any, "ref"> & import("react").RefAttributes<unknown>> & {
    mock: jest.Mock<any, [props: any, ref: any], any>;
};
export declare const resetStyles: () => void;
export declare const resetComponents: () => void;
export declare function registerCSS(css: string, options?: CssToReactNativeRuntimeOptions): void;
export declare function revealStyles(obj: any): any;
