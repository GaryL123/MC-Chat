"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.experimentsToJS = exports.transform = void 0;
const metro_transform_worker_1 = __importDefault(require("metro-transform-worker"));
const css_to_rn_1 = require("../css-to-rn");
function transform(config, projectRoot, filename, data, options) {
    const transformer = config.transformerPath
        ? require(config.transformerPath).transform
        : metro_transform_worker_1.default.transform;
    const isCss = options.type !== "asset" && matchCss(filename);
    if (!isCss || options.platform === "web") {
        return transformer(config, projectRoot, filename, data, options);
    }
    const runtimeData = JSON.stringify((0, css_to_rn_1.cssToReactNativeRuntime)(data, config.cssToReactNativeRuntime));
    const isCSSModule = matchCssModule(filename);
    data = experimentsToJS(config.cssToReactNativeRuntime?.experiments);
    data = Buffer.from(isCSSModule
        ? `${data}module.exports = require("react-native-css-interop").StyleSheet.create(${runtimeData});`
        : `${data}require("react-native-css-interop").StyleSheet.registerCompiled(${runtimeData})`);
    return metro_transform_worker_1.default.transform(config, projectRoot, filename, data, options);
}
exports.transform = transform;
function experimentsToJS(experiments = {}) {
    return Object.entries(experiments).reduce((acc, [key, value]) => {
        if (!value)
            return acc;
        switch (key) {
            case "inlineAnimations":
                return `${acc}process.env.NATIVEWIND_INLINE_ANIMATION = '1';`;
            default:
                return acc;
        }
    }, "");
}
exports.experimentsToJS = experimentsToJS;
function matchCss(filePath) {
    return /\.css$/.test(filePath);
}
function matchCssModule(filePath) {
    return /\.module(\.(native|ios|android|web))?\.css$/.test(filePath);
}
//# sourceMappingURL=transformer.js.map