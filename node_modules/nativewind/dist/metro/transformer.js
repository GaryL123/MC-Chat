"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const metro_transform_worker_1 = __importDefault(require("metro-transform-worker"));
const path_1 = __importDefault(require("path"));
const transformer_1 = require("react-native-css-interop/metro/transformer");
async function transform(config, projectRoot, filename, data, options) {
    if (path_1.default.resolve(process.cwd(), filename) === config.nativewind.input) {
        if (options.platform !== "web" && options.dev && options.hot) {
            return metro_transform_worker_1.default.transform(config, projectRoot, filename, Buffer.from(`const { StyleSheet } = require("react-native-css-interop");
const url = require("react-native/Libraries/Core/Devtools/getDevServer")().url.replace(/(https?:\\/\\/.*)(:\\d*\\/)(.*)/, "$1$3")
new globalThis.WebSocket(\`\${url}:${config.nativewind.fastRefreshPort}\`).addEventListener("message", (event) => StyleSheet.registerCompiled(JSON.parse(event.data)));
StyleSheet.registerCompiled(JSON.parse('${config.nativewind.parsedOutput}'));`, "utf8"), options);
        }
        else if (options.platform === "web") {
            return metro_transform_worker_1.default.transform(config, projectRoot, filename, Buffer.from(`require('${config.nativewind.outputPath}');`, "utf8"), options);
        }
        else {
            data = Buffer.from(config.nativewind.rawOutput, "utf8");
        }
    }
    return (0, transformer_1.transform)(config, projectRoot, filename, data, options);
}
exports.transform = transform;
//# sourceMappingURL=transformer.js.map