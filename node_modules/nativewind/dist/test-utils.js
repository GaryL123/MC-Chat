"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testCasesWithOptions = exports.testCases = exports.invalidValue = exports.invalidProperty = exports.style = exports.renderTailwind = exports.createMockComponent = void 0;
const react_native_1 = require("react-native");
const react_native_2 = require("@testing-library/react-native");
const container_queries_1 = __importDefault(require("@tailwindcss/container-queries"));
const postcss_1 = __importDefault(require("postcss"));
const testing_library_1 = require("react-native-css-interop/testing-library");
const tailwindcss_1 = __importDefault(require("tailwindcss"));
const common_1 = require("./metro/common");
var testing_library_2 = require("react-native-css-interop/testing-library");
Object.defineProperty(exports, "createMockComponent", { enumerable: true, get: function () { return testing_library_2.createMockComponent; } });
process.env.NATIVEWIND_NATIVE = react_native_1.Platform.OS !== "web" ? "1" : undefined;
async function renderTailwind(component, { base = false, css = base
    ? "@tailwind base;@tailwind components;@tailwind utilities;"
    : "@tailwind components;@tailwind utilities;", config = {}, ...options } = {}) {
    let { css: output } = await (0, postcss_1.default)([
        (0, tailwindcss_1.default)({
            theme: {},
            ...config,
            presets: [require("./tailwind")],
            plugins: [container_queries_1.default],
            content: getClassNames(component),
        }),
    ]).process(css, { from: undefined });
    (0, testing_library_1.registerCSS)(output, common_1.cssToReactNativeRuntimeOptions);
    return (0, react_native_2.render)(component, options);
}
exports.renderTailwind = renderTailwind;
function getClassNames(component) {
    const classNames = [];
    if (component.props.className) {
        classNames.push({ raw: component.props.className });
    }
    if (component.props.children) {
        const children = Array.isArray(component.props.children)
            ? component.props.children
            : [component.props.children];
        classNames.push(...children.flatMap((c) => getClassNames(c)));
    }
    return classNames;
}
const style = (style) => ({ style });
exports.style = style;
const invalidProperty = (...properties) => ({
    warning: (name) => new Map([
        [
            name,
            properties.map((property) => ({
                type: "IncompatibleNativeProperty",
                property,
            })),
        ],
    ]),
});
exports.invalidProperty = invalidProperty;
const invalidValue = (property, value) => ({
    warning: (name) => new Map([
        [name, [{ type: "IncompatibleNativeValue", property, value }]],
    ]),
});
exports.invalidValue = invalidValue;
function testCases(...cases) {
    return testCasesWithOptions({}, ...cases);
}
exports.testCases = testCases;
function testCasesWithOptions({ testID = "react-native-css-interop", animated = false, ...options }, ...cases) {
    const A = (0, testing_library_1.createMockComponent)(react_native_1.View);
    test.each(cases)("%s", async (className, expected) => {
        await renderTailwind(<A testID={testID} className={className}/>, options);
        const component = react_native_2.screen.getByTestId(testID, {
            includeHiddenElements: true,
        });
        if (animated) {
            expect(component).toHaveAnimatedStyle(expected.style);
        }
        else if (expected.style) {
            expect(component).toHaveStyle(Object.fromEntries(Object.entries(expected.style)));
        }
        else {
            expect(component).toHaveStyle(undefined);
        }
        if (expected.props) {
            expect(component.props).toEqual(expect.objectContaining(expected.props));
        }
        if (expected.warning) {
            expect(testing_library_1.warnings).toEqual(expected.warning(className));
        }
        else {
            expect(testing_library_1.warnings).toEqual(new Map());
        }
    });
}
exports.testCasesWithOptions = testCasesWithOptions;
//# sourceMappingURL=test-utils.js.map