/// <reference types="react" />
import { ViewStyle, ImageStyle, TextStyle } from "react-native";
import { RenderOptions, render } from "@testing-library/react-native";
import { ExtractionWarning } from "react-native-css-interop/testing-library";
import { Config } from "tailwindcss";
export { createMockComponent } from "react-native-css-interop/testing-library";
export interface RenderTailwindOptions extends RenderOptions {
    config?: Omit<Config, "content">;
    base?: boolean;
    css?: string;
    testID?: string;
    animated?: boolean;
}
export declare function renderTailwind<T extends {
    className: string;
}>(component: React.ReactElement<T>, { base, css, config, ...options }?: RenderTailwindOptions): Promise<ReturnType<typeof render>>;
type Style = ViewStyle & TextStyle & ImageStyle;
type TestCase = [
    string,
    {
        style?: ReturnType<typeof style>["style"];
        props?: Record<string, unknown>;
        warning?: (name: string) => Map<string, ExtractionWarning[]>;
    }
];
export declare const style: (style: Style & Record<string, unknown>) => {
    style: ViewStyle & TextStyle & ImageStyle & Record<string, unknown>;
};
export declare const invalidProperty: (...properties: string[]) => {
    warning: (name: string) => Map<string, ExtractionWarning[]>;
};
export declare const invalidValue: (property: string, value: any) => {
    warning: (name: string) => Map<string, ExtractionWarning[]>;
};
export declare function testCases(...cases: TestCase[]): void;
export declare function testCasesWithOptions({ testID, animated, ...options }: RenderTailwindOptions, ...cases: TestCase[]): void;
